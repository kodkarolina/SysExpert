import CMdatabase.CModuleEntity;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.ListDataListener;
import java.awt.*;
import java.util.List;

public class ResultsScreen {
    private JPanel resultsPanel;
    private JPanel contentPanel;
    private JList selectedCMList;
    private JButton resetButton;
    private JLabel radioField;
    private JLabel productField;
    private JLabel bluetoothField;
    private JLabel wifiField;
    private JLabel voltageField;
    private JLabel energySaveField;
    private JLabel directionField;
    private JLabel uartField;
    private JLabel spiField;
    private JLabel i2cField;
    private JLabel usbField;
    private JLabel programmableField;
    private JLabel packageField;
    private JLabel speedField;
    private JLabel currentConsumptionField;
    private JLabel workFreqField;
    private JLabel encryptionField;
    private JLabel arduinoSupportField;
    private JLabel priceField;
    private JScrollPane detailsScrollPanel;
    private JButton backButton;

    private ScreenNavigationListener listener;

    public ResultsScreen(List<CModuleEntity> cmList) {

        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();


        selectedCMList.setModel(new CMListModel(cmList));
        selectedCMList.addListSelectionListener(listSelectionEvent -> {
            showDetails(cmList.get(selectedCMList.getSelectedIndex()));
            detailsScrollPanel.getViewport().setViewPosition(new Point(0, 0));
        });
        if (selectedCMList.getModel().getSize() > 0) {
            selectedCMList.setSelectedIndex(0);
        }

        backButton.addActionListener(actionEvent -> {
            if (listener != null) {
                listener.onNavigationButtonClick(ScreenNavigationListener.PREVIEW_BUTTON);
            }
        });

        resetButton.addActionListener(actionEvent -> {
            if (listener != null) {
                listener.onNavigationButtonClick(ScreenNavigationListener.NEXT_BUTTON);
            }
        });

    }

    private void showDetails(CModuleEntity connectionModule) {
        productField.setText(connectionModule.getName());
        bluetoothField.setText(connectionModule.getBluetooth() + ""); //TODO: bluetooth version
        wifiField.setText(connectionModule.getWifi() != 0 ? "tak" : "nie");
        radioField.setText(connectionModule.getRadio() != 0 ? "tak" : "nie");
        voltageField.setText(String.format("od %.1fV do %.1fV", connectionModule.getVoltage_min() / 1000f, connectionModule.getVoltage_max() / 1000f));
        energySaveField.setText(connectionModule.getPower_saving() != 0 ? "tak" : "nie");
        directionField.setText(connectionModule.getConnection_direction() + ""); //TODO: communication direction
        uartField.setText(connectionModule.getUART() != 0 ? "tak" : "nie");
        spiField.setText(connectionModule.getSPI() != 0 ? "tak" : "nie");
        i2cField.setText(connectionModule.getI2C() != 0 ? "tak" : "nie");
        usbField.setText(connectionModule.getUSB() != 0 ? "tak" : "nie");
        programmableField.setText(connectionModule.getProgrammable() != 0 ? "tak" : "nie");
        packageField.setText(connectionModule.getModule_package() > 0 ? "montaż przewlekany" : "montaż powierzchniowy");
        speedField.setText(connectionModule.getCommunicationSpeed() + " Mbps");
        currentConsumptionField.setText(connectionModule.getCurrent_consumption() + " mA");
        workFreqField.setText(connectionModule.getWork_freq() + "GHz");
        encryptionField.setText(connectionModule.getEncryption() != 0 ? "tak" : "nie");
        arduinoSupportField.setText(connectionModule.getArduino_support() != 0 ? "tak" : "nie");
        priceField.setText(String.valueOf(connectionModule.getPrice()));
    }

    public JPanel getResultPanel() {
        return resultsPanel;
    }

    public void setNavigationScreenListener(ScreenNavigationListener listener) {
        this.listener = listener;
    }

    private void createUIComponents() {

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        resultsPanel = new JPanel();
        resultsPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(5, 5, 5, 5), -1, -1));
        resultsPanel.add(panel1, BorderLayout.NORTH);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, 26, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Wyniki");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        contentPanel = new JPanel();
        contentPanel.setLayout(new BorderLayout(0, 0));
        resultsPanel.add(contentPanel, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel2, BorderLayout.NORTH);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Wybrane układy komunikacji"));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        selectedCMList = new JList();
        scrollPane1.setViewportView(selectedCMList);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel3, BorderLayout.CENTER);
        panel3.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Szczegóły"));
        detailsScrollPanel = new JScrollPane();
        panel3.add(detailsScrollPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(20, 2, new Insets(0, 0, 0, 0), -1, -1));
        detailsScrollPanel.setViewportView(panel4);
        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(11);
        label2.setHorizontalTextPosition(11);
        label2.setText("Produkt:");
        panel4.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Bluetooth:");
        panel4.add(label3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("WiFi:");
        panel4.add(label4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Komunikacja radiowa");
        panel4.add(label5, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Napięcie pracy:");
        panel4.add(label6, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("Tryby oszczędzania energii:");
        panel4.add(label7, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("Tryb komunikacji:");
        panel4.add(label8, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("Obsługa UART:");
        panel4.add(label9, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("Obsługa SPI:");
        panel4.add(label10, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label11 = new JLabel();
        label11.setText("Obsługa I2C:");
        panel4.add(label11, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label12 = new JLabel();
        label12.setText("Obsługa USB:");
        panel4.add(label12, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label13 = new JLabel();
        label13.setText("Moduł programowalny:");
        panel4.add(label13, new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label14 = new JLabel();
        label14.setText("Typ montażu:");
        panel4.add(label14, new GridConstraints(12, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label15 = new JLabel();
        label15.setText("Szybkość transmisji:");
        panel4.add(label15, new GridConstraints(13, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label16 = new JLabel();
        label16.setText("Średni pobór prądu:");
        panel4.add(label16, new GridConstraints(14, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label17 = new JLabel();
        label17.setText("Częstotliwość pracy:");
        panel4.add(label17, new GridConstraints(15, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label18 = new JLabel();
        label18.setText("Szyfrowanie:");
        panel4.add(label18, new GridConstraints(16, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label19 = new JLabel();
        label19.setText("Wsparcie arduino:");
        panel4.add(label19, new GridConstraints(17, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final JLabel label20 = new JLabel();
        label20.setText("Cena:");
        panel4.add(label20, new GridConstraints(18, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        productField = new JLabel();
        productField.setText("-");
        panel4.add(productField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bluetoothField = new JLabel();
        bluetoothField.setText("-");
        panel4.add(bluetoothField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        wifiField = new JLabel();
        wifiField.setText("-");
        panel4.add(wifiField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        radioField = new JLabel();
        radioField.setText("-");
        panel4.add(radioField, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        voltageField = new JLabel();
        voltageField.setText("-");
        panel4.add(voltageField, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        energySaveField = new JLabel();
        energySaveField.setText("-");
        panel4.add(energySaveField, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        directionField = new JLabel();
        directionField.setText("-");
        panel4.add(directionField, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        uartField = new JLabel();
        uartField.setText("-");
        panel4.add(uartField, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spiField = new JLabel();
        spiField.setText("-");
        panel4.add(spiField, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        i2cField = new JLabel();
        i2cField.setText("-");
        panel4.add(i2cField, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        usbField = new JLabel();
        usbField.setText("-");
        panel4.add(usbField, new GridConstraints(10, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        programmableField = new JLabel();
        programmableField.setText("-");
        panel4.add(programmableField, new GridConstraints(11, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        packageField = new JLabel();
        packageField.setText("-");
        panel4.add(packageField, new GridConstraints(12, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        speedField = new JLabel();
        speedField.setText("-");
        panel4.add(speedField, new GridConstraints(13, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        currentConsumptionField = new JLabel();
        currentConsumptionField.setText("-");
        panel4.add(currentConsumptionField, new GridConstraints(14, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        workFreqField = new JLabel();
        workFreqField.setText("-");
        panel4.add(workFreqField, new GridConstraints(15, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        encryptionField = new JLabel();
        encryptionField.setText("-");
        panel4.add(encryptionField, new GridConstraints(16, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        arduinoSupportField = new JLabel();
        arduinoSupportField.setText("-");
        panel4.add(arduinoSupportField, new GridConstraints(17, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        priceField = new JLabel();
        priceField.setText("-");
        panel4.add(priceField, new GridConstraints(18, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel4.add(spacer1, new GridConstraints(19, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 2, new Insets(5, 5, 5, 5), -1, -1));
        resultsPanel.add(panel5, BorderLayout.SOUTH);
        resetButton = new JButton();
        resetButton.setEnabled(true);
        resetButton.setText("Koniec");
        panel5.add(resetButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Wstecz");
        panel5.add(backButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return resultsPanel;
    }

    public interface ScreenNavigationListener {
        public final int NEXT_BUTTON = 0;
        public final int PREVIEW_BUTTON = 1;

        void onNavigationButtonClick(int buttonID);
    }

    private class CMListModel implements ListModel {
        List<CModuleEntity> cmList;

        CMListModel(List<CModuleEntity> cmList) {
            this.cmList = cmList;
        }

        @Override
        public int getSize() {
            return cmList.size();
        }

        @Override
        public Object getElementAt(int i) {
            return cmList.get(i).getName();
        }

        @Override
        public void addListDataListener(ListDataListener listDataListener) {

        }

        @Override
        public void removeListDataListener(ListDataListener listDataListener) {

        }
    }
}
