import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

public class QuestionScreen {
    private JPanel questionPanel;
    private JButton backButton;
    private JButton nextButton;
    private JTextArea questionArea;
    private JPanel answerPanel;
    private JPanel contentPanel;

    private JRadioButton[] answerButtons;
    private ButtonGroup buttonGroup;
    private QuestionScreenListener listener;

    public QuestionScreen() {
        this(null);
    }

    public QuestionScreen(IQuestionModel questionModel) {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();

        if (questionModel != null) {
            setQuestionModel(questionModel);
        }

        nextButton.addActionListener(actionEvent -> {
            if (listener != null) {
                listener.action(true, selectedButtonNumber());
            }
        });

        backButton.addActionListener(actionEvent -> {
            if (listener != null) {
                listener.action(false, selectedButtonNumber());
            }
        });
    }

    private int selectedButtonNumber() {
        int selectedButton = -1;

        for (int i = 0; i < answerButtons.length; i++) {
            if (answerButtons[i].isSelected()) {
                selectedButton = i;
                break;
            }
        }
        return selectedButton;
    }

    public void setQuestionListener(QuestionScreenListener listener) {
        this.listener = listener;
    }

    public JPanel getQuestionPanel() {
        return questionPanel;
    }


    private void createAnswers(String[] answers) {
        int itemNumber = answers.length;
        buttonGroup = new ButtonGroup();
        answerButtons = new JRadioButton[itemNumber];
        answerPanel.removeAll();
        answerPanel.setLayout(new GridLayoutManager(itemNumber, 1, new Insets(0, 0, 0, 0), -1, -1));

        for (int i = 0; i < itemNumber; i++) {
            JRadioButton button = new JRadioButton();
            buttonGroup.add(button);
            button.setText(answers[i]);
            button.addActionListener(actionEvent -> nextButton.setEnabled(true));
            answerButtons[i] = button;
            answerPanel.add(button, new GridConstraints(i, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        }
    }

    public void setQuestionModel(IQuestionModel questionModel) {
        questionArea.setText(questionModel.getQuestion());
        createAnswers(questionModel.getAnswers());
        nextButton.setEnabled(false);
        if (questionModel.selectedAnswer() >= 0) {
            nextButton.setEnabled(true);
            answerButtons[questionModel.selectedAnswer()].setSelected(true);
        }
        questionPanel.updateUI();
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        questionPanel = new JPanel();
        questionPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(5, 5, 5, 5), -1, -1));
        questionPanel.add(panel1, BorderLayout.NORTH);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, 26, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Ankieta");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 3, new Insets(5, 5, 5, 5), -1, -1));
        questionPanel.add(panel2, BorderLayout.SOUTH);
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Wstecz");
        panel2.add(backButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nextButton = new JButton();
        nextButton.setEnabled(false);
        nextButton.setText("Dalej");
        panel2.add(nextButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(2, 1, new Insets(5, 5, 5, 5), -1, -1));
        questionPanel.add(contentPanel, BorderLayout.CENTER);
        questionArea = new JTextArea();
        questionArea.setEditable(false);
        questionArea.setLineWrap(true);
        questionArea.setWrapStyleWord(true);
        contentPanel.add(questionArea, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        answerPanel = new JPanel();
        answerPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(answerPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        answerPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Odpowiedzi"));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return questionPanel;
    }


    public interface QuestionScreenListener {
        void action(boolean nextQuestion, int selectedAnswer);
    }
}